// tslint:disable
/**
 * Regiolab API
 * Look mom! I\'m learning your reading preferences!
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface AccessTokenResponse
 */
export interface AccessTokenResponse {
    /**
     * Access token that can be used to authenticate against the api
     * @type {string}
     * @memberof AccessTokenResponse
     */
    accessToken: string;
    /**
     * The expiry date of the access token
     * @type {string}
     * @memberof AccessTokenResponse
     */
    expires: string;
}
/**
 * 
 * @export
 * @interface ArticleDetails
 */
export interface ArticleDetails {
    /**
     * Unique id for this user
     * @type {string}
     * @memberof ArticleDetails
     */
    _id: string;
    /**
     * Headline of the article
     * @type {string}
     * @memberof ArticleDetails
     */
    headline: string;
    /**
     * Ankeiler of the article
     * @type {string}
     * @memberof ArticleDetails
     */
    ankeiler: string;
    /**
     * Lead of the article
     * @type {string}
     * @memberof ArticleDetails
     */
    lead: string;
    /**
     * Publishing date of the article
     * @type {string}
     * @memberof ArticleDetails
     */
    pubDate: string;
    /**
     * Whether or not the article is breaking news
     * @type {boolean}
     * @memberof ArticleDetails
     */
    breakingNews: boolean;
    /**
     * Body of the article
     * @type {string}
     * @memberof ArticleDetails
     */
    body: string;
}
/**
 * 
 * @export
 * @interface ArticleListItem
 */
export interface ArticleListItem {
    /**
     * Unique id for this user
     * @type {string}
     * @memberof ArticleListItem
     */
    _id: string;
    /**
     * Headline of the article
     * @type {string}
     * @memberof ArticleListItem
     */
    headline: string;
    /**
     * Ankeiler of the article
     * @type {string}
     * @memberof ArticleListItem
     */
    ankeiler: string;
    /**
     * Lead of the article
     * @type {string}
     * @memberof ArticleListItem
     */
    lead: string;
    /**
     * Publishing date of the article
     * @type {string}
     * @memberof ArticleListItem
     */
    pubDate: string;
    /**
     * Whether or not the article is breaking news
     * @type {boolean}
     * @memberof ArticleListItem
     */
    breakingNews: boolean;
}

/**
 * AccessTokenApi - axios parameter creator
 * @export
 */
export const AccessTokenApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get an access token that can be used to authenticate against the api
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccessToken: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/auth`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AccessTokenApi - functional programming interface
 * @export
 */
export const AccessTokenApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get an access token that can be used to authenticate against the api
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAccessToken(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccessTokenResponse>> {
            const localVarAxiosArgs = await AccessTokenApiAxiosParamCreator(configuration).getAccessToken(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * AccessTokenApi - factory interface
 * @export
 */
export const AccessTokenApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary Get an access token that can be used to authenticate against the api
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccessToken(options?: any): AxiosPromise<AccessTokenResponse> {
            return AccessTokenApiFp(configuration).getAccessToken(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AccessTokenApi - object-oriented interface
 * @export
 * @class AccessTokenApi
 * @extends {BaseAPI}
 */
export class AccessTokenApi extends BaseAPI {
    /**
     * 
     * @summary Get an access token that can be used to authenticate against the api
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccessTokenApi
     */
    public getAccessToken(options?: any) {
        return AccessTokenApiFp(this.configuration).getAccessToken(options).then((request) => request(this.axios, this.basePath));
    }

}


/**
 * ArticlesApi - axios parameter creator
 * @export
 */
export const ArticlesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Dislike an article
         * @param {string} id Unique id of the article
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dislikeArticle: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling dislikeArticle.');
            }
            const localVarPath = `/articles/{id}/dislike`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get article details
         * @param {string} id Unique id of the article
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getArticleDetails: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getArticleDetails.');
            }
            const localVarPath = `/articles/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get list of articles
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getArticles: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/articles`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get list of recommended articles
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRecommendedArticles: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/articles/recommended`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Like an article
         * @param {string} id Unique id of the article
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        likeArticle: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling likeArticle.');
            }
            const localVarPath = `/articles/{id}/like`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ArticlesApi - functional programming interface
 * @export
 */
export const ArticlesApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Dislike an article
         * @param {string} id Unique id of the article
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async dislikeArticle(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await ArticlesApiAxiosParamCreator(configuration).dislikeArticle(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Get article details
         * @param {string} id Unique id of the article
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getArticleDetails(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ArticleDetails>> {
            const localVarAxiosArgs = await ArticlesApiAxiosParamCreator(configuration).getArticleDetails(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Get list of articles
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getArticles(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ArticleListItem>>> {
            const localVarAxiosArgs = await ArticlesApiAxiosParamCreator(configuration).getArticles(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Get list of recommended articles
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRecommendedArticles(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ArticleListItem>>> {
            const localVarAxiosArgs = await ArticlesApiAxiosParamCreator(configuration).getRecommendedArticles(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Like an article
         * @param {string} id Unique id of the article
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async likeArticle(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await ArticlesApiAxiosParamCreator(configuration).likeArticle(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * ArticlesApi - factory interface
 * @export
 */
export const ArticlesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary Dislike an article
         * @param {string} id Unique id of the article
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dislikeArticle(id: string, options?: any): AxiosPromise<void> {
            return ArticlesApiFp(configuration).dislikeArticle(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get article details
         * @param {string} id Unique id of the article
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getArticleDetails(id: string, options?: any): AxiosPromise<ArticleDetails> {
            return ArticlesApiFp(configuration).getArticleDetails(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get list of articles
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getArticles(options?: any): AxiosPromise<Array<ArticleListItem>> {
            return ArticlesApiFp(configuration).getArticles(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get list of recommended articles
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRecommendedArticles(options?: any): AxiosPromise<Array<ArticleListItem>> {
            return ArticlesApiFp(configuration).getRecommendedArticles(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Like an article
         * @param {string} id Unique id of the article
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        likeArticle(id: string, options?: any): AxiosPromise<void> {
            return ArticlesApiFp(configuration).likeArticle(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ArticlesApi - object-oriented interface
 * @export
 * @class ArticlesApi
 * @extends {BaseAPI}
 */
export class ArticlesApi extends BaseAPI {
    /**
     * 
     * @summary Dislike an article
     * @param {string} id Unique id of the article
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArticlesApi
     */
    public dislikeArticle(id: string, options?: any) {
        return ArticlesApiFp(this.configuration).dislikeArticle(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get article details
     * @param {string} id Unique id of the article
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArticlesApi
     */
    public getArticleDetails(id: string, options?: any) {
        return ArticlesApiFp(this.configuration).getArticleDetails(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get list of articles
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArticlesApi
     */
    public getArticles(options?: any) {
        return ArticlesApiFp(this.configuration).getArticles(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get list of recommended articles
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArticlesApi
     */
    public getRecommendedArticles(options?: any) {
        return ArticlesApiFp(this.configuration).getRecommendedArticles(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Like an article
     * @param {string} id Unique id of the article
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArticlesApi
     */
    public likeArticle(id: string, options?: any) {
        return ArticlesApiFp(this.configuration).likeArticle(id, options).then((request) => request(this.axios, this.basePath));
    }

}


